# .github/workflows/cd_blue_green.yaml
#
# Builds every runtime image, scans it, signs it, and (for the backend only)
# performs a blue-green deploy on Fly.io.  Uses the new *hardened* Dockerfiles.
# ──────────────────────────────────────────────────────────────────────────────
name: CD – build, scan & blue-green deploy

on:
  push:
    branches:
      - main

env:
  # ghcr.io/<org or user>
  REGISTRY: ghcr.io/${{ github.repository_owner }}

jobs:
  build-push-scan-sign:
    runs-on: ubuntu-latest
    permissions:
      contents: read          # checkout
      packages: write         # push to GHCR
      id-token: write         # key-less Cosign signing
    strategy:
      matrix:
        include:
          - name: backend                 # ← FastAPI app
            dockerfile: backend.Dockerfile
            image: carboncore-backend
          - name: worker                  # ← Celery worker
            dockerfile: worker.Dockerfile
            image: carboncore-worker
          - name: ingestor                # ← Grid-ingestor job
            dockerfile: ingestor.Dockerfile
            image: carboncore-ingestor

    steps:
    # ──────────────────────────────────────────────────────────────────────────
    # Checkout source
    - uses: actions/checkout@v4

    # Multi-arch tooling (amd64 + arm64)
    - uses: docker/setup-qemu-action@v3
    - uses: docker/setup-buildx-action@v3

    # GHCR login (token already scoped for package write)
    - uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    # ──────────────────────────────────────────────────────────────────────────
    # Build & push image (with reproducible digest output)
    - name: Build & push image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ${{ matrix.dockerfile }}
        platforms: linux/amd64,linux/arm64
        push: true
        provenance: false                    # we’ll sign first, then attach
        tags: |
          ${{ env.REGISTRY }}/${{ matrix.image }}:${{ github.sha }}
          ${{ env.REGISTRY }}/${{ matrix.image }}:latest

    # ──────────────────────────────────────────────────────────────────────────
    # Scan for vulnerabilities
    - name: Trivy scan
      uses: aquasecurity/trivy-action@v0.18.0
      with:
        image-ref: ${{ env.REGISTRY }}/${{ matrix.image }}:${{ github.sha }}
        ignore-unfixed: true

    # ──────────────────────────────────────────────────────────────────────────
    # Cosign key-less signing (OIDC → Sigstore)
    - uses: sigstore/cosign-installer@v3

    - name: Sign image with Cosign
      run: |
        cosign sign --yes ${{ env.REGISTRY }}/${{ matrix.image }}@${{ steps.build.outputs.digest }}
      env:
        COSIGN_EXPERIMENTAL: "1"

    # Optional: generate SBOM (kept as artifact & shows in Security tab)
    - name: Generate SBOM
      uses: anchore/sbom-action@v0.16.0
      with:
        image: ${{ env.REGISTRY }}/${{ matrix.image }}:${{ github.sha }}

    # ──────────────────────────────────────────────────────────────────────────
    # Blue-green deploy **only** for the backend service
    - name: Deploy backend (Fly.io blue-green)
      if: matrix.name == 'backend'
      uses: superfly/flyctl-actions@1.5
      with:
        args: >
          deploy
          --image ${{ env.REGISTRY }}/${{ matrix.image }}:${{ github.sha }}
          --strategy bluegreen
          --wait-timeout 120
      env:
        FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

    # Post-deploy health probe
    - name: Health check
      if: matrix.name == 'backend'
      run: |
        for i in {1..10}; do
          curl -fsSL https://api.yourapp.com/health && exit 0
          sleep 10
        done
        echo "Health check failed"; exit 1

    # Roll back if the health check (or deploy) failed
    - name: Roll back on failure
      if: failure() && matrix.name == 'backend'
      run: flyctl releases rollback -y
      env:
        FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
